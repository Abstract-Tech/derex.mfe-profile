name: "CI workflow"
on:
  push:
    # This will avoid multiple pipelines for being started when pushing
    # to a PR branch.
    # It will run the pipeline when the PR is merged though
    branches:
      - master
  pull_request:
    # We need to specify we want to run only on branch pushes
    # and not tags
    branches:
      - "**"

env:
  CACHE_VERSION: 1
  PYTHON_VERSION: 3.8
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        OPENEDX_VERSION: ["lilac"]
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup pip cache
        uses: actions/cache@v2
        with:
          path: "${{ github.workspace }}/.cache/pip"
          key: ${{ env.CACHE_VERSION }}-${{ env.PYTHON_VERSION }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ env.CACHE_VERSION }}-${{ env.PYTHON_VERSION }}-pip-

      - name: Setup derex
        uses: ./.github/actions/setup
        with:
          DEVELOPMENT_MODE: true

      - name: Setup submodules
        run: |
          git submodule init
          git submodule update
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Github Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: |
          set -x
          export DOCKER_BUILDKIT=1
          cd examples/${{ matrix.OPENEDX_VERSION }}/minimal/
          derex build mfe-profile ${{ matrix.OPENEDX_VERSION }}
          docker save $(derex build mfe-profile --only-print-image-name) -o mfe-docker-build.tar

      - name: Upload built docker image
        uses: actions/upload-artifact@v2
        with:
          name: mfe-docker-build
          path: examples/${{ matrix.OPENEDX_VERSION }}/minimal/mfe-docker-build.tar

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        PYTHON_VERSION: [3.7, 3.7, 3.8, 3.9, 3.10]
        OPENEDX_VERSION: ["lilac"]
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup pip cache
        uses: actions/cache@v2
        with:
          path: "${{ github.workspace }}/.cache/pip"
          key: ${{ env.CACHE_VERSION }}-${{ matrix.PYTHON_VERSION }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ env.CACHE_VERSION }}-${{ matrix.PYTHON_VERSION }}-pip-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download built docker image
        uses: actions/download-artifact@v2
        with:
          name: mfe-docker-build
          path: /tmp

      - name: Load image
        run: |
          docker load --input /tmp/mfe-docker-build.tar
          docker image ls -a

      - name: Setup derex
        uses: ./.github/actions/setup

      - name: "Start services"
        run: ddc-services up -d

      - name: "Prime Mysql, Rabbitmq and Elasticsearch"
        run: |
          set -ex
          cd examples/${{ matrix.OPENEDX_VERSION }}/minimal/
          derex mysql reset --force
          derex reset-rabbitmq

      - name: "Start lms and profile MFE"
        run: |
          set -ex
          cd examples/${{ matrix.OPENEDX_VERSION }}/minimal/
          ddc-project config
          derex build final
          ddc-project up -d lms mfe-profile

          # Give the containers some time to boot
          sleep 10

      - name: "Show logs"
        run: |
          set -ex
          cd examples/${{ matrix.OPENEDX_VERSION }}/minimal/
          ddc-project logs

      - name: "Test that the profile MFE is working"
        run: |
          echo "TODO"

  push:
    name: Push
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        OPENEDX_VERSION: ["lilac"]
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Setup pip cache
        uses: actions/cache@v2
        with:
          path: "${{ github.workspace }}/.cache/pip"
          key: ${{ env.CACHE_VERSION }}-${{ matrix.PYTHON_VERSION }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ env.CACHE_VERSION }}-${{ matrix.PYTHON_VERSION }}-pip-

      - name: Setup derex
        uses: ./.github/actions/setup
        with:
          DEVELOPMENT_MODE: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download built docker image
        uses: actions/download-artifact@v2
        with:
          name: mfe-docker-build
          path: /tmp

      - name: Load image
        run: |
          cd examples/${{ matrix.OPENEDX_VERSION }}/minimal/
          docker load --input /tmp/mfe-docker-build.tar
          docker image ls -a

      - name: Tag image as latest if on master
        if: ${{ github.ref == 'refs/heads/master' }}
        run: |
          cd examples/${{ matrix.OPENEDX_VERSION }}/minimal/
          docker tag \
            $(derex build mfe-profile ${{ matrix.OPENEDX_VERSION }} --only-print-image-name) \
            $(derex build mfe-profile ${{ matrix.OPENEDX_VERSION }} --only-print-image-name | sed 's/:.*/:latest/')

      - name: Do not tag image if we are not on master
        if: ${{ github.ref != 'refs/heads/master' }}
        run: |
          echo "You are not on master ! Infact you are on ${{ github.ref }}"

      - name: Login to Github Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image to docker registry
        run: |
          cd examples/${{ matrix.OPENEDX_VERSION }}/minimal/
          docker push $(derex build mfe-profile ${{ matrix.OPENEDX_VERSION }} --only-print-image-name | sed 's/:.*//') -a
